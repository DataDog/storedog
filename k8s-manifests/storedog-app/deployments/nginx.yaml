apiVersion: v1
kind: Service
metadata:
  name: service-proxy
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      name: http
    - port: 81
      targetPort: 81
      name: status
  selector:
    app: service-proxy
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: service-proxy
  labels:
    tags.datadoghq.com/service: service-proxy
    tags.datadoghq.com/version: 1.28.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: service-proxy
  template:
    metadata:
      labels:
        app: service-proxy
        tags.datadoghq.com/service: service-proxy
        tags.datadoghq.com/version: 1.28.0
      annotations:
        ad.datadoghq.com/service-proxy.logs: '[{"source": "nginx"}]'
        ad.datadoghq.com/service-proxy.checks: |
          {
            "nginx": {
            "init_config": {},
            "instances": [{"nginx_status_url": "http://%%host%%:81/nginx_status/"}]
            }
          }
    spec:
      volumes:
        - name: apmsocketpath
          hostPath:
            path: /var/run/datadog/
      containers:
        - name: service-proxy
          image: ${REGISTRY_URL}/nginx:${SD_TAG}
          ports:
            - containerPort: 80
              name: http
            - containerPort: 81
              name: status
          env:
            - name: NGINX_RESOLVER
              value: "kube-dns.kube-system.svc.cluster.local"
            - name: DD_ENV
              value: ${DD_ENV}
            - name: DD_SERVICE
              value: service-proxy
            - name: DD_VERSION
              value: ${DD_VERSION_NGINX}
            - name: DD_TRACE_AGENT_URL
              value: 'unix:///var/run/datadog/apm.socket'
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"
          volumeMounts:
            - name: apmsocketpath
              mountPath: /var/run/datadog
          # Health probes optimized for Nginx reverse proxy
          startupProbe:
            httpGet:
              path: /nginx_status
              port: status
              scheme: HTTP
            initialDelaySeconds: 2       # Nginx starts very fast
            periodSeconds: 2
            timeoutSeconds: 3            # Slightly more tolerant
            failureThreshold: 5          # 2s + (5 Ã— 2s) = 12s max startup
            successThreshold: 1
          readinessProbe:
            httpGet:
              path: /nginx_status
              port: status
              scheme: HTTP
            initialDelaySeconds: 0       # Startup probe handles delay
            periodSeconds: 3             # Very frequent for proxy service
            timeoutSeconds: 2            # Fast for nginx status
            failureThreshold: 2          # Quick failure detection for proxy
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /nginx_status
              port: status
              scheme: HTTP
            initialDelaySeconds: 0       # Startup probe handles delay
            periodSeconds: 10            # Conservative for production
            timeoutSeconds: 5            # Allow for potential upstream delays
            failureThreshold: 3          # Standard tolerance