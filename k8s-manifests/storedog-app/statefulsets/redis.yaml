apiVersion: v1
kind: Service
metadata:
  name: redis
spec:
  ports:
    - port: 6379
      name: redis
  clusterIP: None
  selector:
    app: redis
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  labels:
    tags.datadoghq.com/env: ${DD_ENV}
    tags.datadoghq.com/service: redis
    tags.datadoghq.com/version: "6.2"
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
        tags.datadoghq.com/env: ${DD_ENV}
        tags.datadoghq.com/service: redis
        tags.datadoghq.com/version: "6.2"
      annotations:
        ad.datadoghq.com/redis.logs: '[{"source": "redis"}]'
        ad.datadoghq.com/redis.checks: |
          {
            "redisdb": {
            "init_config": {},
            "instances": [{"host":"%%host%%", "port":6379}]
            }
          }
    spec:
      containers:
        - name: redis
          image: redis:6.2-alpine
          command: ["redis-server"]
          args: ["/etc/redis/redis.conf"]
          ports:
            - containerPort: 6379
              name: redis
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "1000m"
              memory: "1Gi"
          volumeMounts:
            - name: redis-data
              mountPath: /data
            - name: redis-config
              mountPath: /etc/redis
              readOnly: true
      volumes:
        - name: redis-config
          configMap:
            name: redis-config
            items:
              - key: redis.conf
                path: redis.conf
  volumeClaimTemplates:
    - metadata:
        name: redis-data
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 5Gi
