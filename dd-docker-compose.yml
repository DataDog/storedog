# Storedog Development Environment
# This docker-compose file sets up a complete development environment for the Storedog application.
services:
  # Datadog Agent
  datadog-agent:
    image: gcr.io/datadoghq/agent:7.67.0
    pid: host
    environment:
      - DD_API_KEY
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
      - DD_ENV=SSI-testing
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_APM_RECEIVER_SOCKET=/var/run/datadog/apm.socket
      - DD_DOGSTATSD_SOCKET=/var/run/datadog/dsd.socket
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE="name:datadog-agent"
    volumes:
      - /var/run/datadog:/var/run/datadog
      - /opt/datadog-agent/run:/opt/datadog-agent/run:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
    networks:
      - storedog-network

  # Frontend service (Next.js)
  frontend:
    image: ${REGISTRY_URL-localhost:5000}/storedog-frontend:${SD_TAG-latest}
    command: bash -c "wait-for-it backend:4000 -- ${FRONTEND_COMMAND:-npm run dev}"
    depends_on:
      - worker
      - backend
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
    networks:
      - storedog-network
    environment:
      - NEXT_PUBLIC_ADS_ROUTE=${NEXT_PUBLIC_ADS_ROUTE:-/services/ads}
      - NEXT_PUBLIC_DISCOUNTS_ROUTE=${NEXT_PUBLIC_DISCOUNTS_ROUTE:-/services/discounts}
      - NEXT_PUBLIC_DBM_ROUTE=${NEXT_PUBLIC_DBM_ROUTE:-/services/dbm}
      - NEXT_PUBLIC_FRONTEND_API_ROUTE=${NEXT_PUBLIC_FRONTEND_API_ROUTE:-http://localhost:3000}
      - NEXT_PUBLIC_SPREE_API_HOST=${NEXT_PUBLIC_SPREE_API_HOST:-http://nginx/services/backend}
      - NEXT_PUBLIC_SPREE_CLIENT_HOST=${NEXT_PUBLIC_SPREE_CLIENT_HOST:-/services/backend}
      - NEXT_PUBLIC_SPREE_IMAGE_HOST=${NEXT_PUBLIC_SPREE_IMAGE_HOST:-/services/backend}
      - NEXT_PUBLIC_SPREE_ALLOWED_IMAGE_DOMAIN=${NEXT_PUBLIC_SPREE_ALLOWED_IMAGE_DOMAIN:-nginx}
      - DD_APM_INSTRUMENTATION_DEBUG=true

  # Backend service (Ruby on Rails/Spree)
  backend:
    image: ${REGISTRY_URL-localhost:5000}/storedog-backend:${SD_TAG-latest}
    command: wait-for-it postgres:5432 -- bundle exec rails s -b 0.0.0.0 -p 4000 --pid /app/tmp/pids/server.pid
    depends_on:
      - 'postgres'
      - 'redis'
    ports:
      - '4000:4000'
    networks:
      - storedog-network
    volumes:
      - './services/backend:/app'
    environment:
      - REDIS_URL=redis://redis:6379/0
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD-postgres}
      - DISABLE_SPRING=1
      - RAILS_ENV=${RAILS_ENV:-production}
      - DB_POOL=${DB_POOL:-25}
      - MAX_THREADS=${MAX_THREADS:-5}
      - DD_APM_INSTRUMENTATION_DEBUG=true

  # Background job processor (Sidekiq)
  worker:
    image: ${REGISTRY_URL-localhost:5000}/storedog-backend:${SD_TAG-latest}
    command: wait-for-it postgres:5432 -- bundle exec sidekiq -C config/sidekiq.yml
    depends_on:
      - 'postgres'
      - 'redis'
      - 'backend'
    networks:
      - storedog-network
    volumes:
      - ./services/backend:/app
    environment:
      # this will never not be true
      - WORKER=true
      - REDIS_URL=redis://redis:6379/0
      - DB_HOST=postgres
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - DISABLE_SPRING=1
      - DB_POOL=${DB_POOL:-25}
      - MAX_THREADS=${MAX_THREADS:-5}
      - DD_APM_INSTRUMENTATION_DEBUG=true

  # Discounts service (Python/Flask)
  discounts:
    image: ${REGISTRY_URL-localhost:5000}/storedog-discounts:${SD_TAG-latest}
    command: wait-for-it postgres:5432 -- flask run --port=2814 --host=0.0.0.0
    depends_on:
      - postgres
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=0
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_HOST=postgres
      - DD_APM_INSTRUMENTATION_DEBUG=true
    volumes:
      - ./services/discounts:/app
    networks:
      - storedog-network

  # Advertisement service (Java)
  ads:
    image: ${REGISTRY_URL-localhost:5000}/storedog-ads:${SD_TAG-latest}
    environment:
      - DD_APM_INSTRUMENTATION_DEBUG=true
    networks:
      - storedog-network

  # Web server and reverse proxy
  nginx:
    image: ${REGISTRY_URL-localhost:5000}/storedog-nginx:${SD_TAG-latest}
    restart: always
    ports:
      - '80:80'
    networks:
      - storedog-network
    depends_on:
      - frontend
  # Primary database
  postgres:
    image: ${REGISTRY_URL-localhost:5000}/storedog-postgres:${SD_TAG-latest}
    restart: always
    volumes:
      - postgres_logs:/var/log/pg_log:rw
    networks:
      - storedog-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}

  # Cache and job queue
  redis:
    image: redis:6.2-alpine
    volumes:
      - 'redis:/data'
    networks:
      - storedog-network

  # Browser automation for testing
  puppeteer:
    image: ${REGISTRY_URL-localhost:5000}/storedog-puppeteer:${SD_TAG-latest}
    platform: linux/amd64
    environment:
      - STOREDOG_URL=${STOREDOG_URL:-http://nginx:80}
      - PUPPETEER_TIMEOUT=${PUPPETEER_TIMEOUT:-30000}
      - SKIP_SESSION_CLOSE=${SKIP_SESSION_CLOSE:-false}
    networks:
      - storedog-network
    depends_on:
      - frontend
    shm_size: '4gb' # Increase shared memory size
    cap_add:
      - 'SYS_ADMIN' # Required for Puppeteer to run in Docker

volumes:
  redis: # Redis data persistence
  postgres_logs: # PostgreSQL logs storage

networks:
  storedog-network: # Main application network
