# Storedog Development Environment
# This docker-compose file sets up a complete development environment for the Storedog application.
services:
  # Datadog Agent for monitoring and observability
  dd-agent:
    image: gcr.io/datadoghq/agent:latest
    pid: host
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_ENV=${DD_ENV:-development}
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE=image:agent name:puppeteer
      - DD_CLOUD_PROVIDER_METADATA=[]
      - DD_HOSTNAME=${DD_HOSTNAME-development-host}
      - DD_DOGSTATSD_NON_LOCAL_TRAFFIC=true
    networks:
      - storedog-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - postgres_logs:/var/log/pg_log:ro

  # Frontend service (Next.js)
  frontend:
    build:
      context: ./services/frontend
    command: ${FRONTEND_COMMAND:-npm run dev}
    depends_on:
      dd-agent:
        condition: service_started
      backend:
        condition: service_healthy
      worker:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "3000"]
      interval: 3s
      start_period: 60s
    volumes:
      - ./services/frontend:/app
      - /app/node_modules
    networks:
      - storedog-network
    environment:
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV:-development}
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_PROFILING_TIMELINE_ENABLED=true
      - DD_PROFILING_ALLOCATION_ENABLED=true
      - DD_SERVICE=store-frontend
      - NEXT_PUBLIC_DD_VERSION_FRONTEND=${NEXT_PUBLIC_DD_VERSION_FRONTEND:-1.0.0}
      - NEXT_PUBLIC_DD_SITE=${NEXT_PUBLIC_DD_SITE:-datadoghq.com}
      - NEXT_PUBLIC_DD_APPLICATION_ID=${NEXT_PUBLIC_DD_APPLICATION_ID:-not-set-in-docker-compose}
      - NEXT_PUBLIC_DD_CLIENT_TOKEN=${NEXT_PUBLIC_DD_CLIENT_TOKEN:-not-set-in-docker-compose}
    labels:
      com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "store-frontend-server", "auto_multi_line_detection": true }]'

  # Backend service (Ruby on Rails/Spree)
  backend:
    build:
      context: ./services/backend
    command: /bin/bash -c "rm -f /app/tmp/pids/server.pid && bundle exec ddprofrb exec rails s -b 0.0.0.0 -p 4000"
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "4000"]
      interval: 3s
      start_period: 60s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      dd-agent:
        condition: service_started
    networks:
      - storedog-network
    volumes:
      - './services/backend:/app'
    environment:
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV:-development}
      - DD_SERVICE=store-backend
      - DD_VERSION=${DD_VERSION_BACKEND:-1.0.0}
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_PROFILING_TIMELINE_ENABLED=true
      - DD_PROFILING_ALLOCATION_ENABLED=true
      - RAILS_ENV=development
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_HOST=postgres
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-backend", "auto_multi_line_detection": true }]'

  # Background job processor (Sidekiq)
  worker:
    build:
      context: ./services/backend
    command: bundle exec ddprofrb exec sidekiq -C config/sidekiq.yml
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      backend:
        condition: service_started
      dd-agent:
        condition: service_started
    healthcheck:
      test: ["CMD", "pgrep", "-f", "sidekiq"]
      interval: 3s
      start_period: 60s
    networks:
      - storedog-network
    volumes:
      - ./services/backend:/app
    environment:
      # this will never not be true
      - WORKER=true
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV:-development}
      - DD_SERVICE=store-worker
      - DD_VERSION=${DD_VERSION_BACKEND:-1.0.0}
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_PROFILING_TIMELINE_ENABLED=true
      - DD_PROFILING_ALLOCATION_ENABLED=true
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_HOST=postgres
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "store-worker", "auto_multi_line_detection": true }]'

  # Discounts service (Python/Flask)
  discounts:
    build:
      context: ./services/discounts
    command: ddtrace-run flask run --port=2814 --host=0.0.0.0
    depends_on:
      postgres:
        condition: service_healthy
      dd-agent:
        condition: service_started
    environment:
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV:-development}
      - DD_SERVICE=store-discounts
      - DD_VERSION=${DD_VERSION_DISCOUNTS:-1.0.0}
      - DD_RUNTIME_METRICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_PROFILING_TIMELINE_ENABLED=true
      - DD_PROFILING_ALLOCATION_ENABLED=true
    volumes:
      - ./services/discounts:/app
    networks:
      - storedog-network
    labels:
        com.datadoghq.ad.logs: '[{"source": "python", "service": "store-discounts"}]'
        com.datadoghq.tags.env: '${DD_ENV}'
        com.datadoghq.tags.service: 'store-discounts'
        com.datadoghq.tags.version: '${DD_VERSION_DISCOUNTS:-1.0.0}'

  # Advertisement service (Java)
  ads:
    build:
      context: ./services/ads/java
    depends_on:
      dd-agent:
        condition: service_started
      postgres:
        condition: service_healthy
    environment:
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV:-development}
      - DD_SERVICE=store-ads
      - DD_VERSION=${DD_VERSION_ADS:-1.0.0}
      - DD_PROFILING_ENABLED=true
      - DD_PROFILING_TIMELINE_ENABLED=true
      - DD_PROFILING_ALLOCATION_ENABLED=true
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_HOST=postgres
    networks:
      - storedog-network
    labels:
      com.datadoghq.ad.logs: '[{"source": "java", "service": "store-ads"}]'
      com.datadoghq.tags.service: 'store-ads'
      com.datadoghq.tags.version: '${DD_VERSION_ADS:-1.0.0}'

  # Web server and reverse proxy
  service-proxy:
    build:
      context: ./services/nginx
    restart: always
    ports:
      - '80:80'
    networks:
      - storedog-network
    depends_on:
      dd-agent:
        condition: service_started
      discounts:
        condition: service_started
      backend:
        condition: service_started
    environment:
      - DD_AGENT_HOST=dd-agent
      - DD_ENV=${DD_ENV:-development}
      - DD_SERVICE=service-proxy
      - DD_VERSION=${DD_VERSION_NGINX:-1.28.0}
    labels:
      com.datadoghq.ad.logs: '[{"source": "nginx", "service": "service-proxy"}]'
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"nginx_status_url": "http://%%host%%:81/nginx_status/"}]'

  # Primary database
  postgres:
    build:
      context: ./services/postgres
    restart: always
    depends_on:
      dd-agent:
        condition: service_started
    healthcheck:
      test: ["CMD", "nc", "-z", "postgres", "5432"]
      interval: 3s
    volumes:
      - postgres_logs:/var/log/pg_log:rw
    networks:
      - storedog-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    labels:
      com.datadoghq.tags.service: 'store-db'
      com.datadoghq.tags.version: '${DD_VERSION_POSTGRES:-15.0}'
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432, "username":"datadog", "password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source": "postgresql", "service":"store-db", "auto_multi_line_detection": true, "path": "/var/log/pg_log/postgresql*.json", "type": "file"}]'

  # Cache and job queue
  redis:
    image: redis:6.2-alpine
    depends_on:
      - dd-agent
    volumes:
      - 'redis:/data'
    networks:
      - storedog-network
    labels:
      com.datadoghq.tags.service: 'redis'
      com.datadoghq.tags.version: '${DD_VERSION_REDIS:-6.2}'
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":6379}]'
      com.datadoghq.ad.logs: '[{"source": "redis"}]'

  # Browser automation for testing
  puppeteer:
    build:
      context: ./services/puppeteer
    platform: linux/amd64
    environment:
      - STOREDOG_URL=${STOREDOG_URL:-http://service-proxy:80}
      - PUPPETEER_TIMEOUT=${PUPPETEER_TIMEOUT:-30000}
      - SKIP_SESSION_CLOSE=${SKIP_SESSION_CLOSE:-false}
    networks:
      - storedog-network
    volumes:
      - ./services/puppeteer/scripts/puppeteer.js:/home/pptruser/puppeteer.js
    depends_on:
      - frontend
    shm_size: '4gb' # Increase shared memory size
    cap_add:
      - 'SYS_ADMIN' # Required for Puppeteer to run in Docker

volumes:
  redis: # Redis data persistence
  postgres_logs: # PostgreSQL logs storage

networks:
  storedog-network: # Main application network
