server {
    listen 80;

    # Reverse proxy for ads
    location /services/ads {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        rewrite ^/services/ads(/.*)$ $1 break;
        # Proxy to ads-java, ensure trailing slash for proper URI handling
        proxy_pass http://ads:3030/;
    }

    # Reverse proxy for discounts 
    location /services/discounts {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Proxy to discounts service
        proxy_pass http://discounts:2814/;
    }

    # Reverse proxy for backend
    location /services/backend {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_pass http://backend:4000/;
    }

    resolver 127.0.0.11 valid=30s;  # Docker DNS resolver

    # Reverse proxy for dbm service (not used that often)
    location /services/dbm {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Use a variable for the proxy_pass to force runtime resolution
        set $upstream_dbm "http://dbm:7595/";
        proxy_pass $upstream_dbm;
        
        # Error handling as suggested before
        proxy_intercept_errors on;
        proxy_connect_timeout 5s;
    }

    # Reverse proxy for frontend (Next.js)
    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Websocket support for Next.js (if applicable)
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
        
        # Use variable for proxy_pass to resolve at runtime
        set $upstream_frontend "http://frontend:3000";
        proxy_pass $upstream_frontend;
        
        # Enable intercepting errors
        proxy_intercept_errors on;
        
        # Custom error page for 502 (Bad Gateway)
        error_page 502 = @frontend_loading;
    }

    # Custom location block for the loading message
    location @frontend_loading {
        # Return a basic HTML page with the loading message
        add_header Content-Type text/html;
        return 200 '<!DOCTYPE html>
    <html>
    <head>
        <title>Application Loading</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                margin: 0;
                padding: 0;
                display: flex;
                justify-content: center;
                align-items: center;
                height: 100vh;
                background-color: #f5f5f5;
                color: #333;
            }
            .container {
                text-align: center;
                padding: 2rem;
                background-color: white;
                border-radius: 8px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
                max-width: 600px;
            }
            h1 {
                color: #4a4a4a;
            }
            .loading {
                margin: 2rem 0;
                font-size: 1.2rem;
            }
            .spinner {
                border: 6px solid #f3f3f3;
                border-top: 6px solid #3498db;
                border-radius: 50%;
                width: 50px;
                height: 50px;
                animation: spin 2s linear infinite;
                margin: 1rem auto;
            }
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Application is Starting</h1>
            <div class="spinner"></div>
            <div class="loading">
                The frontend service is currently loading. Please wait a moment and refresh the page.
            </div>
            <p>
                If this message persists for more than a minute, please check the Docker logs for the frontend service.
            </p>
            <p>
                <code>docker compose logs -f frontend</code>
            </p>
        </div>
        <script>
            // Auto refresh every 5 seconds
            setTimeout(() => window.location.reload(), 5000);
        </script>
    </body>
    </html>';
    }
}
