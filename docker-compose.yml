version: '3.7'
services:
  postgres:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - 'postgres:/var/lib/postgresql/data'
      - ./services/backend/db/restore:/docker-entrypoint-initdb.d
    networks:
      - storedog-net
    labels:
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432,"username":"datadog","password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source":"postgresql","service":"postgresql"}]'
  redis:
    image: redis:6.2-alpine
    volumes:
      - 'redis:/data'
    networks:
      - storedog-net
  web:
    depends_on:
      - 'postgres'
      - 'redis'
    build:
      context: ./services/backend
    ports:
      - '${DOCKER_HOST_WEB_PORT:-4000}:4000'
    volumes:
      - 'bundle_cache:/bundle'
      - './services/backend:/app'
      - .env:/app/.env
    environment:
      REDIS_URL: redis://redis:6379/0
      DB_HOST: postgres
      DB_PORT: 5432
      DISABLE_SPRING: 1
    networks:
      - storedog-net
  worker:
    depends_on:
      - 'postgres'
      - 'redis'
      - 'web'
    build:
      context: ./services/backend
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - 'bundle_cache:/bundle'
      - './services/backend:/app'
      - .env:/app/.env
    environment:
      REDIS_URL: redis://redis:6379/0
      DB_HOST: postgres
      DB_PORT: 5432
      DISABLE_SPRING: 1
    networks:
      - storedog-net
  ads:
    depends_on:
      - postgres
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
      - DD_SERVICE=ads
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
    build:
      context: ./services/ads
    command: flask run --port=${ADS_PORT} --host=0.0.0.0 # If using any other port besides the default 9292, overriding the CMD is required
    volumes:
      - "./services/ads:/app"
    ports:
      - "${ADS_PORT}:${ADS_PORT}"
    networks:
      - storedog-net
  discounts:
    depends_on:
      - postgres
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
      - DD_SERVICE=discounts
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
    build:
      context: ./services/discounts
    command: flask run --port=${DISCOUNTS_PORT} --host=0.0.0.0 # If using any other port besides the default 8282, overriding the CMD is required
    volumes:
      - "./services/discounts:/app"
    ports:
      - "${DISCOUNTS_PORT}:${DISCOUNTS_PORT}"
      - "22"
    networks:
      - storedog-net
  dd-agent:
    image: gcr.io/datadoghq/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE="name:datadog-agent"
    ports:
      - "8126:8126"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
    networks:
      - storedog-net

volumes:
  redis:
  postgres:
  bundle_cache:

networks:
  storedog-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.43.0.0/16
