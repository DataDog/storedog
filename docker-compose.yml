version: '3.7'
services:
  frontend:
    build:
      context: ./services/frontend
    command: yarn dev
    depends_on:
      - worker
      - dd-agent
    volumes:
      - "./services/frontend/site:/storedog-app/site"
    ports:
      - 3000:3000
    networks:
      - storedog-net
    environment:
      DD_VERSION: "7"
      DD_SERVICE: "storedog-frontend"
      DD_ENV: "dev"
    labels:
      com.datadoghq.ad.logs: '[{"source": "nodejs", "service": "storedog-frontend",  "auto_multi_line_detection":true }]'
  nginx:
    build:
      context: ./services/nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - frontend
      - dd-agent
    labels:
      com.datadoghq.ad.logs: '[{"source": "nginx", "service": "nginx"}]'
    networks:
      - storedog-net
  postgres:
    image: postgres:13-alpine
    restart: always
    depends_on: 
      - dd-agent
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - 'postgres:/var/lib/postgresql/data'
      - ./services/backend/db/restore:/docker-entrypoint-initdb.d
      - ./services/backend/db/postgresql.conf:/postgresql.conf
    labels:
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432,"username":"datadog","password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source":"postgresql","service":"postgres", "auto_multi_line_detection": true}]'
    command: ["postgres", "-c", "config_file=/postgresql.conf"]
    networks:
      - storedog-net
  redis:
    image: redis:6.2-alpine
    depends_on:
      - dd-agent
    volumes:
      - 'redis:/data'
    networks:
      - storedog-net
  web:
    depends_on:
      - 'postgres'
      - 'redis'
      - 'dd-agent'
    build:
      context: ./services/backend
    ports:
      - '${DOCKER_HOST_WEB_PORT:-4000}:4000'
    volumes:
      - 'bundle_cache:/bundle'
      - './services/backend:/app'
      - .env:/app/.env
    environment:
      REDIS_URL: redis://redis:6379/0
      DB_HOST: postgres
      DB_PORT: 5432
      DISABLE_SPRING: 1
      DD_APPSEC_ENABLED: 1
      DD_AGENT_HOST: 172.43.0.1
      DD_VERSION: "7"
      DD_SERVICE: "storedog-backend"
      DD_ENV: "dev"
    networks:
      - storedog-net
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "storedog-backend",  "auto_multi_line_detection":true }]'
  worker:
    depends_on:
      - 'postgres'
      - 'redis'
      - 'web'
      - 'dd-agent'
    build:
      context: ./services/backend
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - 'bundle_cache:/bundle'
      - './services/backend:/app'
      - .env:/app/.env
    environment:
      REDIS_URL: redis://redis:6379/0
      DB_HOST: postgres
      DB_PORT: 5432
      DISABLE_SPRING: 1
      DD_APPSEC_ENABLED: 1
      DD_AGENT_HOST: 172.43.0.1
    networks:
      - storedog-net
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "service": "storedog-worker",  "auto_multi_line_detection":true }]'
  ads:
    depends_on:
      - postgres
      - dd-agent
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_APPSEC_ENABLED=true
      - DD_VERSION=7
      - DD_SERVICE=ads
      - DD_ENV=dev
    build:
      context: ./services/ads/python
    command: flask run --port=${ADS_PORT} --host=0.0.0.0 # If using any other port besides the default 9292, overriding the CMD is required
    volumes:
      - ./services/ads/python:/app
    ports:
      - "${ADS_PORT}:${ADS_PORT}"
    networks:
      - storedog-net
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "ads", "log_processing_rules": [{
          "type": "multi_line",
          "name": "log_start_with_date",
          "pattern" : "\d{3}.\d{2}.\d{1}.\d{1}"
        }] }]'
  discounts:
    depends_on:
      - postgres
      - dd-agent
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_APPSEC_ENABLED=true
      - DD_VERSION=7
      - DD_SERVICE=discounts
      - DD_ENV=dev
    build:
      context: ./services/discounts
    command: ./my-wrapper-script.sh ${DISCOUNTS_PORT}
    volumes:
      - ./services/discounts:/app
    ports:
      - "${DISCOUNTS_PORT}:${DISCOUNTS_PORT}"
      - "22:22"
    networks:
      - storedog-net
    labels:
      com.datadoghq.ad.logs: '[{"source": "python", "service": "discounts", "log_processing_rules": [{
          "type": "multi_line",
          "name": "log_start_with_date",
          "pattern" : "\\[\\d{4}-\\d{2}-\\d{2}\\s\\d{2}:\\d{2}:\\d{2}\\,\\d{3}"
        }] }]'
  auth:
    depends_on:
      - postgres
      - dd-agent
    profiles:
      - csrf
    environment:
      - FLASK_APP=auth.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
      - DD_SERVICE=storedog-auth
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_APPSEC_ENABLED=true
    build:
      context: ./services/auth
    command: gunicorn --bind 0.0.0.0:${AUTH_PORT} auth:app # If using any other port besides the default 8282, overriding the CMD is required
    volumes:
      - "./services/auth:/app"
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"
    networks:
      - storedog-net
  dbm:
    depends_on:
      - postgres
      - dd-agent
    profiles:
      - dbm
    environment:
      - FLASK_APP=dbm.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
      - DD_SERVICE=storedog-dbm
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
      - DD_APPSEC_ENABLED=true
    build:
      context: ./services/dbm
    command: gunicorn --bind 0.0.0.0:${DBM_PORT} dbm:app # If using any other port besides the default 8282, overriding the CMD is required
    volumes:
      - "./services/dbm:/app"
    ports:
      - "${DBM_PORT}:${DBM_PORT}"
    networks:
      - storedog-net
  dd-agent:
    image: gcr.io/datadoghq/agent:latest
    environment:
      - DD_API_KEY=${DD_API_KEY}
      - DD_APM_ENABLED=true
      - DD_APM_NON_LOCAL_TRAFFIC=true
      - DD_LOGS_ENABLED=true
      - DD_HOSTNAME=172.43.0.4
      - DD_LOGS_CONFIG_CONTAINER_COLLECT_ALL=true
      - DD_CONTAINER_EXCLUDE="name:datadog-agent"
      - DD_HOSTNAME_TRUST_UTS_NAMESPACE=true
    ports:
      - "8126:8126"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - ./services/backend/db/dd-agent-conf.yaml:/conf.d/postgres.d/conf.yaml
    networks:
      storedog-net:
        ipv4_address: 172.43.0.4
  ads-java:
    build:
      context: ./services/ads/java
    depends_on:
      - dd-agent
    environment:
      - DD_SERVICE=ads-java
      - DD_AGENT_HOST=dd-agent
      - DD_LOGS_INJECTION=true
      - DD_TRACE_ANALYTICS_ENABLED=true
      - DD_PROFILING_ENABLED=true
    ports:
      - "3030:8080"
    networks:
      - storedog-net
    labels:
      com.datadoghq.ad.logs: '[{"source": "java", "service": "ads-java",  "auto_multi_line_detection": true}]'
  attackbox:
    build:
      context: ./services/attackbox
    profiles:
      - attackbox
    environment:
      - ATTACK_GOBUSTER
      - ATTACK_HYDRA
      - ATTACK_GOBUSTER_INTERVAL
      - ATTACK_HYDRA_INTERVAL
      - ATTACK_SSH
      - ATTACK_SSH_INTERVAL
      - ATTACK_HOST
      - ATTACK_PORT
    depends_on:
      - web
      - discounts
      - dd-agent
    networks:
      - storedog-net

volumes:
  redis:
  postgres:
  bundle_cache:

networks:
  storedog-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.43.0.0/16