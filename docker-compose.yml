services:
  otelcol:
      container_name: otelcol
      hostname: otelcol
      image: otel/opentelemetry-collector-contrib:0.130.0
      deploy:
        resources:
          limits:
            memory: 200M
      networks:
        - storedog-network
      restart: unless-stopped
      command:
        - "--config=/etc/otelcol-config.yaml"
      volumes:
        - ./services/otel/otelcol-config.yaml:/etc/otelcol-config.yaml
        - /var/run/docker.sock:/var/run/docker.sock
      ports:
        - 4317:4317
        - 4318:4318
  frontend:
    container_name: frontend
    hostname: frontend
    build: 
      context: ./services/frontend
    #image: ghcr.io/datadog/storedog/frontend:${STOREDOG_IMAGE_VERSION:-latest}
    command: bash -c "wait-for-it backend:4000 -- ${FRONTEND_COMMAND:-npm run prod}"
    depends_on:
      - worker
      - backend
      - otelcol
    networks:
      - storedog-network
    labels:
      com.datadoghq.ad.logs: '[{"source": "nodejs", "auto_multi_line_detection":true }]'
  backend:
    container_name: backend
    hostname: backend
    build: 
      context: ./services/backend  
    #image: ghcr.io/datadog/storedog/backend:${STOREDOG_IMAGE_VERSION:-latest}
    command: wait-for-it postgres:5432 -- bundle exec rails s -b 0.0.0.0 -p 4000 --pid /app/tmp/pids/server.pid
    depends_on:
      - 'postgres'
      - 'redis'
      - 'otelcol'
    networks:
      - storedog-network
    volumes:
      - './services/backend:/app'
    environment:
      # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=backend
      - OTEL_SERVICE_VERSION=${DD_VERSION_BACKEND:-1.0.0}
      - OTEL_TRACES_EXPORTER=console,otlp
      - OTEL_METRICS_EXPORTER=console,otlp
      - OTEL_LOGS_EXPORTER=console,otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4318
      - OTEL_PROPAGATORS=tracecontext,baggage
      - OTEL_LOG_LEVEL=debug
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "auto_multi_line_detection":true }]'
  worker:
    container_name: worker
    hostname: worker
    image: ghcr.io/datadog/storedog/backend:${STOREDOG_IMAGE_VERSION:-latest}
    command: wait-for-it postgres:5432 -- bundle exec sidekiq -C config/sidekiq.yml
    depends_on:
      - 'postgres'
      - 'redis'
      - 'backend'
      - 'otelcol'
    networks:
      - storedog-network
    environment:
       # OpenTelemetry configuration
      - OTEL_SERVICE_NAME=worker
      - OTEL_SERVICE_VERSION=${DD_VERSION_BACKEND:-1.0.0}
      - OTEL_TRACES_EXPORTER=console,otlp
      - OTEL_METRICS_EXPORTER=console,otlp
      - OTEL_LOGS_EXPORTER=console,otlp
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4318
      - OTEL_PROPAGATORS=tracecontext,baggage
      - OTEL_LOG_LEVEL=debug
    labels:
      com.datadoghq.ad.logs: '[{"source": "ruby", "auto_multi_line_detection":true }]'
  discounts:
    container_name: discounts
    hostname: discounts
    build: 
      context: ./services/discounts
    #command: wait-for-it postgres:5432 -- ddtrace-run flask run --port=2814 --host=0.0.0.0
    depends_on:
      - postgres
      - otelcol
    networks:
      - storedog-network
    labels:
      com.datadoghq.ad.logs: '[{"source": "python"}]'
  ads:
    container_name: ads
    hostname: ads
    build: 
      context: ./services/ads/java
    #image: ghcr.io/datadog/storedog/ads-java:${STOREDOG_IMAGE_VERSION:-latest}
    depends_on:
      - postgres
      - otelcol
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_HOST=postgres
      # OpenTelemetry configuration for Java agent
      - OTEL_SERVICE_NAME=store-ads
      - OTEL_SERVICE_VERSION=${DD_VERSION_ADS:-1.0.0}
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otelcol:4318
      - OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
      - OTEL_RESOURCE_ATTRIBUTES=service.name=store-ads,service.version=${DD_VERSION_ADS:-1.0.0},deployment.environment=production
      - OTEL_TRACES_EXPORTER=console,otlp
      - OTEL_METRICS_EXPORTER=console,otlp
      - OTEL_LOGS_EXPORTER=console,otlp
      - OTEL_LOG_LEVEL=debug
    networks:
      - storedog-network
    labels:
      com.datadoghq.ad.logs: '[{"source": "java"}]'
      com.datadoghq.tags.service: 'store-ads'
      com.datadoghq.tags.version: '${DD_VERSION_ADS:-1.0.0}'
  service-proxy:
    container_name: service-proxy
    hostname: service-proxy
    image: ghcr.io/datadog/storedog/nginx:${STOREDOG_IMAGE_VERSION:-latest}
    restart: always
    ports:
      - '80:80'
    networks:
      - storedog-network
    depends_on:
      - frontend
    environment:
      - DD_AGENT_HOST=dd-agent
      - DD_SERVICE=service-proxy
      - DD_VERSION=${DD_VERSION_NGINX:-1.28.0}
    labels:
      com.datadoghq.ad.logs: '[{"source": "nginx"}]'
      com.datadoghq.ad.check_names: '["nginx"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"nginx_status_url": "http://%%host%%:81/nginx_status/"}]'
  postgres:
    container_name: postgres
    hostname: postgres
    image: ghcr.io/datadog/storedog/postgres:${STOREDOG_IMAGE_VERSION:-latest}
    restart: always
    volumes:
      - postgres_logs:/var/log/pg_log:rw
    networks:
      - storedog-network
    environment:
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    labels:
      com.datadoghq.tags.service: 'store-db'
      com.datadoghq.tags.version: '${DD_VERSION_POSTGRES:-15.0}'
      com.datadoghq.ad.check_names: '["postgres"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":5432, "username":"datadog", "password":"datadog"}]'
      com.datadoghq.ad.logs: '[{"source": "postgresql", "auto_multi_line_detection":true, "path": "/var/log/pg_log/postgresql*.json", "type": "file"}]'
  redis:
    container_name: redis
    hostname: redis
    image: redis:6.2-alpine
    volumes:
      - 'redis:/data'
    networks:
      - storedog-network
    labels:
      com.datadoghq.tags.service: 'redis'
      com.datadoghq.tags.env: '${DD_ENV:-production}'
      com.datadoghq.tags.version: '${DD_VERSION_REDIS:-6.2}'
      com.datadoghq.ad.check_names: '["redisdb"]'
      com.datadoghq.ad.init_configs: '[{}]'
      com.datadoghq.ad.instances: '[{"host":"%%host%%", "port":6379}]'
      com.datadoghq.ad.logs: '[{"source": "redis", "service": "redis"}]'
  puppeteer:
    container_name: puppeteer
    hostname: puppeteer
    image: ghcr.io/datadog/storedog/puppeteer:${STOREDOG_IMAGE_VERSION:-latest}
    platform: linux/amd64
    environment:
      - STOREDOG_URL=${STOREDOG_URL:-http://service-proxy:80}
      - PUPPETEER_TIMEOUT=${PUPPETEER_TIMEOUT:-30000}
    networks:
      - storedog-network
    depends_on:
      - frontend
    shm_size: '4gb' # Increase shared memory size
    cap_add:
      - 'SYS_ADMIN' # Required for Puppeteer to run in Docker

volumes:
  redis:
  postgres_logs:

networks:
  storedog-network:
